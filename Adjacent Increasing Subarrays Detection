import java.util.List;

class Solution {
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        if (nums == null) return false;
        int n = nums.size();
        if (2 * k > n) return false;

        int[] len = new int[n]; // len[i] = length of strictly increasing run ending at i
        len[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums.get(i) > nums.get(i - 1)) len[i] = len[i - 1] + 1;
            else len[i] = 1;
        }

        // s is start index of first subarray; must satisfy s + 2*k - 1 <= n - 1 => s <= n - 2*k
        for (int s = 0; s <= n - 2 * k; s++) {
            int endFirst = s + k - 1;
            int endSecond = s + 2 * k - 1;
            if (len[endFirst] >= k && len[endSecond] >= k) return true;
        }
        return false;
    }
}
