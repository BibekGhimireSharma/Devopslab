class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (candidates == null || candidates.length == 0) return result;

        Arrays.sort(candidates); // helps pruning
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] candidates, int remain, int start,
                           List<Integer> path, List<List<Integer>> result) {
        if (remain == 0) {
            result.add(new ArrayList<>(path)); // found valid combination
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            int val = candidates[i];
            if (val > remain) break; // further values will be too large because array is sorted
            path.add(val);
            // not i+1 because we can reuse the same element unlimited times
            backtrack(candidates, remain - val, i, path, result);
            path.remove(path.size() - 1); // backtrack
        }
    }
}
